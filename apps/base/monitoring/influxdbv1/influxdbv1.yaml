apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdbv1
  namespace: monitoring
  labels:
    app: influxdbv1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdbv1
  template:
    metadata:
      labels:
        app: influxdbv1
    spec:
      containers:
      - name: influxdbv1
        image: influxdb:1.11.8
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8086
        volumeMounts:
        - mountPath: /etc/influxdb
          name: config
          subPath: influxdbv1
        - mountPath: /root/.influxdb
          name: data
          subPath: influxdbv1
      initContainers:
      - name: influxdbv1-init
        image: influxdb:1.11.8
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'if [ -s /etc/influxdb/influxdb.conf ]; then echo file already there; else influxd config > /etc/influxdb/influxdb.conf; fi']
        # command: ['sh', '-c', 'influxd config > /etc/influxdb/influxdb.conf']
        volumeMounts:
        - mountPath: /etc/influxdb
          name: config
          subPath: influxdbv1
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: local-conf-monitoring-pvc
      - name: data
        persistentVolumeClaim:
          claimName: local-data-monitoring-pvc
      dnsConfig:
        options:
        - name: ndots
          value: "1"
---
kind: Service
apiVersion: v1
metadata:
  name: influxdbv1-service
  namespace: monitoring
spec:
  selector:
    app: influxdbv1
  ports:
  - protocol: TCP
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  namespace: monitoring
  name: influxdbv1-graphite-2003-tcp
  annotations:
    metallb.universe.tf/allow-shared-ip: 'share-graphite'
spec:
  type: LoadBalancer
  loadBalancerIP: '${GRAPHITE_LOADBALANCER_IP}'
  selector:
    app: influxdbv1
  ports:
  - protocol: TCP
    port: 2003
    targetPort: 2003
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: influxdbv1-ingress
  namespace: monitoring
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    gethomepage.dev/description: V1
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: More Apps
    gethomepage.dev/icon: influxdb.svg
    gethomepage.dev/name: InfluxDB
    gethomepage.dev/pod-selector: app=influxdbv1
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - 'influxdbv1.example.com'
    secretName: influxdbv1-tls
  rules:
  - host: influxdbv1.example.com
    http:
      paths:
      - pathType: Prefix
        path: '/'
        backend:
          service:
            name: influxdbv1-service
            port:
              number: 8086

# curl -G https://influxdbv1.int.sambaum.ch/query --data-urlencode "q=CREATE DATABASE graphite"
# curl -XPOST 'https://influxdbv1.int.sambaum.ch/query' --data-urlencode 'q=CREATE DATABASE "graphite"'
