apiVersion: apps/v1
kind: Deployment
metadata:
  name: rotki
  namespace: default
  labels:
    app: rotki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rotki
  template:
    metadata:
      labels:
        app: rotki
    spec:
      containers:
      - name: rotki
        image: rotki/rotki:v1.38.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /data
          name: config
          subPath: rotki
        env:
        - name: TZ
          value: 'Europe/Zurich'
        - name: ROTKI_ACCEPT_DOCKER_RISK
          value: '1'
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: local-conf-pvc
      dnsConfig:
        options:
        - name: ndots
          value: "1"
---
kind: Service
apiVersion: v1
metadata:
  name: rotki-service
  namespace: default
spec:
  selector:
    app: rotki
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rotki-ingress
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    gethomepage.dev/description: Rotki portfolio manager
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: More Apps
    gethomepage.dev/icon: https://docs.rotki.com/logo.png
    gethomepage.dev/name: rotki
    gethomepage.dev/pod-selector: app=rotki
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - 'rotki.example.com'
    secretName: rotki-tls
  rules:
  - host: rotki.example.com
    http:
      paths:
      - pathType: Prefix
        path: '/'
        backend:
          service:
            name: rotki-service
            port:
              number: 80
